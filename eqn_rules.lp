% Armando Diaz Tolentino <ajdt@cs.washington.edu> 
% 
% This file contains all the rules used to solve an equation
% generated by eqn_generator.lp
%
% each rule's section contains both the condtions for the rule to fire,
% and the actions to perform if the rule is fired.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% SOLVER RULES %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%================================================================================
% addCommonTerms: a*x^b + c*x^b ----> (a+c)*x^b, 2 Cases
%================================================================================
% 						### RULE CONDITIONS ###
% TODO: refactor action data from actions!
% there's an add poly node with two children that are monomials of the same degree
possible(action(addCommonTerms(N1, C1, C2, Coef1+Coef2), addCommTerms), S) 	:- 	holds(N1, type(poly), S),
											holds(N1, nodeOper(add), S),
											holds(N1, parentOf(C1), S),
											holds(N1, parentOf(C2), S),
											holds(C1, type(mono), S),
											holds(C2, type(mono), S),
											holds(C1, nodeDeg(Deg), S),
											holds(C2, nodeDeg(Deg), S),
											holds(C1, nodeCoef(Coef1), S),
											holds(C2, nodeCoef(Coef2), S),
											Coef1 != 0,% remove
											Coef2 != 0,% remove
											C1 != C2.
% 						### APPLYING THE RULE ###
% 						### CASE 1: parent node has more than 2 children ###
% add the two nodes together
assigned(C1, nodeCoef(Sum), S) 			:-	do_action(action(addCommonTerms(N1, C1, C2, Sum), addCommTerms), S),
											holds(N1, numChildren(Kids), S), Kids > 2.
% decrement number of children
assigned(N1, numChildren(Kids - 1), S) 	:-	do_action(action(addCommonTerms(N1, C1, C2)), S),
											holds(N1, numChildren(Kids), S), Kids > 2.


% 						### CASE 2: parent node has exactly 2 children ###
%--------------------------------------------------------------------------------
% 								so parent node becomes monomial.
% remove old facts about parent
removed(N1, Fact, S) 				:- 	do_action(action(addCommonTerms(N1, C1, C2)), S),
										holds(N1, numChildren(Kids), S), Kids == 2,
										holds(C2, Fact, S).
% parent ID is still a node, becomes a monomial, and gains node parameters
assigned(N1, node(N1), S) 			:-	do_action(action(addCommonTerms(N1, C1, C2, Sum), addCommTerms), S),
										holds(N1, numChildren(Kids), S), Kids == 2.
assigned(N1, type(mono), S) 		:-	do_action(action(addCommonTerms(N1, C1, C2, Sum), addCommTerms), S),
										holds(N1, numChildren(Kids), S), Kids == 2.
assigned(N1, nodeCoef(Sum), S) 		:-	do_action(action(addCommonTerms(N1, C1, C2, Sum), addCommTerms), S),
										holds(N1, numChildren(Kids), S), Kids == 2.
assigned(N1, nodeDeg(Degree), S) 	:-	do_action(action(addCommonTerms(N1, C1, C2, Sum), addCommTerms), S),
										holds(N1, numChildren(Kids), S), Kids == 2,
										holds(C1, nodeDeg(Degree), S) .
% C1 child node is deleted 
removed(C1, Fact, S)				:-	do_action(action(addCommonTerms(N1, C1, C2)), S),
										holds(N1, numChildren(Kids), S), Kids == 2,
										holds(C1, Fact, S).

%						### BOTH CASES ###
%--------------------------------------------------------------------------------
% completely erase second node											
removed(C2, Fact, S)	:-	do_action(action(addCommonTerms(N1, C1, C2)), S),
							holds(C2, Fact, S).
%================================================================================
%================================================================================

