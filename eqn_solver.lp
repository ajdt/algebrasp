% Armando Diaz Tolentino <ajdt@cs.washington.edu> 
% 
% This file encodes a solver for the equations
% generated by eqn_generator.lp
%
% NOTE: this file depends on eqn_rule for the rules used to solve an equation!

#const max_steps = 1. % max number of actions until a solution is reached
step(0..max_steps). 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% INITIAL EQN FACTS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% all of the facts created by eqn_generator initially hold 
initially(ID, field(type, T))				:-	type(ID,T).
initially(ID, field(nodeOper, Op))			:-	nodeOper(ID,Op).
initially(ID, field(numChildren, Num))		:-	numChildren(ID,Num).
initially(PID, field(parentOf, CID))		:-	parentOf(PID, CID).
initially(ID, field(side, S))				:-	side(ID, S).
initially(ID, hidden(depth, D))				:-	depth(ID, D). % NOTE: hidden fields are not inherited
initially(ID, field(nodeCoef, C))			:-	nodeCoef(ID, C).
initially(ID, field(nodeDeg, D))			:-	nodeDeg(ID, D).


% all initial facts hold at step zero
holds(ID, Fact, 0)		:-	initially(ID, Fact).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% EDITING EQN FACTS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Facts can be removed, updated, or assigned at each step, if not, then they carry over from last step.

% every fact that isn't removed at step S, holds at the next step
holds(ID, Fact, S+1)	:-	holds(ID, Fact, S), not removed(ID, Fact, S), step(S+1).
holds(ID, Fact, S+1)	:-	assigned(ID, Fact, S), step(S+1). % new fact that is generated

% 						### UPDATE FACT
%--------------------------------------------------------------------------------
% to update a field means to remove old field and add the new field value
assigned(ID, Fact, S) :- update(ID, Fact, S).
removed(ID, field(Name, OrigValue), S)	:- update(ID, field(Name, Value), S), 
										holds(ID, field(Name, OrigValue), S).

% 						### INHERITING FACTS
%--------------------------------------------------------------------------------
% N1 inherits all field() predicates from C1, not hidden() predicates
% NOTE: DOES NOT remove C1
update(N1, field(Name, Value), S)		:- inheritFrom(N1, C1, S), holds(C1, field(Name, Value), S).

% 						### DELETING A NODE
%--------------------------------------------------------------------------------
% abstracted notion of deleting a node
removed(ToDelete, Fact, S)		:-	delete(ToDelete, S),
									holds(ToDelete, Fact, S) .

% 						### REMOVING NODE FROM SUBTREE
%--------------------------------------------------------------------------------
% shrinking a subtree by one node!
delete(ToRemove, S) :- shrinkSubtree(Parent, ToRemove, S).
							
% if have more than two kids, then just decrement num kids
update(Parent, field(numChildren,Kids - 1), S)	:-	shrinkSubtree(Parent, ToRemove, S),
													holds(Parent, field(numChildren,Kids), S), Kids > 2.
% if exactly two kids, then replace remaining child...
inheritFromAndDelete(Parent, SecondKid, S)		:-	shrinkSubtree(Parent, ToRemove, S),
													holds(Parent, field(numChildren,2), S),
													holds(Parent, field(parentOf,SecondKid), S),
													SecondKid != ToRemove.
inheritFrom(Parent, SecondKid, S)				:- inheritFromAndDelete(Parent, SecondKid, S).
delete(SecondKid, S) 							:- inheritFromAndDelete(Parent, SecondKid, S).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% RULE SELECTION %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% possible actions:
%	each possible action is valid at a particular point in time
%	possible(action, S)
%
%	TODO: need a convenient way to factor out the actions that will be done if
%	a candidate action is selected
%
%   for every possible action, we select one action to be performed
% 	then for the performed action, we follow the required steps



% do no more than one action per time step
0 { _selected(Action, S) : possible(Action, S) } 1 :- step(S).

% avoid no-ops between rule applications. All rule applications happen first.
actionforStep(S) :- _selected(Action,S).
:- step(S), step(S+1), not actionforStep(S), actionforStep(S+1).



% project just on the action name, as opposed to the specific terms the action applies to. 
% later, can project on action occuring at a particular time step: action(Name, Step)
action(Name) :- _selected(action(X,Name), S).



% TODO: remove this is just for testing:
_node(N)              	:-	node(N).              
_type(ID,T)           	:-	type(ID,T).           
_nodeOper(ID,Op)		:-	nodeOper(ID,Op).     
_numChildren(ID,Num) 	:-	numChildren(ID,Num). 
_parentOf(PID, CID)   	:-	parentOf(PID, CID).   
_side(ID, S)          	:-	side(ID, S).          
_depth(ID, D)         	:-	depth(ID, D).         
_nodeCoef(ID, C)     	:-	nodeCoef(ID, C).     
_nodeDeg(ID, D)      	:-	nodeDeg(ID, D).      


% TODO: remove. Used by eqn visualizer
_type(ID,T, S)				:-	holds(ID, field(type,T), S).			
_nodeOper(ID,Op, S)			:-	holds(ID, field(nodeOper,Op), S).		
_numChildren(ID,Num, S)		:-	holds(ID, field(numChildren,Num), S).	
_parentOf(ID, CID, S)		:-	holds(ID, field(parentOf,CID), S).	
_side(ID, S, S)				:-	holds(ID, field(side,S), S).			
_depth(ID, D, S)			:-	holds(ID, field(depth,D), S).			
_nodeCoef(ID, C, S)			:-	holds(ID, field(nodeCoef,C), S).		
_nodeDeg(ID, D, S)			:-	holds(ID, field(nodeDeg,D), S).		

%#show holds/2.
%#show action/1.
#show action/1.
#show _node/1.
#show _type/2.
#show _nodeOper/2.
#show _numChildren/2.
#show _parentOf/2.
#show _side/2.
#show _depth/2.
#show _nodeCoef/2.
#show _nodeDeg/2.

% used for eqn solver steps
#show _type/3.
#show _nodeOper/3.
#show _numChildren/3.
#show _parentOf/3.
#show _side/3.
#show _depth/3.
#show _nodeCoef/3.
#show _nodeDeg/3.

