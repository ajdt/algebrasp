% Armando Diaz Tolentino <ajdt@cs.washington.edu> 
% 
% This file encodes a solver for the equations
% generated by eqn_generator.lp
%

#const max_steps = 3. % max number of actions until a solution is reached
step(0..max_steps). 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% EQN STATES AT GIVEN STEP %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% all of the facts created by eqn_generator initially hold 
initially(node(N))				:-	node(N).
initially(type(ID,T))			:-	type(ID,T).
initially(node_oper(ID,Op))		:-	node_oper(ID,Op).
initially(num_children(ID,Num))	:-	num_children(ID,Num).
initially(parentOf(PID, CID))	:-	parentOf(PID, CID).
initially(side(ID, S))			:-	side(ID, S).
initially(depth(ID, D))			:-	depth(ID, D).
initially(node_coef(ID, C))		:-	node_coef(ID, C).
initially(node_deg(ID, D))		:-	node_deg(ID, D).


% all initial facts hold at step zero
holds(0, Fact)		:-	initially(Fact).


% every fact that isn't removed at step S, holds at the next step
holds(S+1, Fact)	:-	holds(S, Fact), not removed(S, Fact), step(S+1).
holds(S+1, Fact)	:-	assigned(S, Fact), step(S+1). % new fact that is generated

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% SOLVER RULES %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% possible actions:
%	each possible action is valid at a particular point in time
%	possible(action, S)
%
%	TODO: need a convenient way to factor out the actions that will be done if
%	a candidate action is selected
%
%   for every possible action, we select one action to be performed
% 	then for the performed action, we follow the required steps



#show holds/2.

