Definitions:
  generator: {filename: eqn_generator.lp}
  solver: {filename: eqn_solver.lp }
  
  #x_plus_one_equals_three: |
      #% [n1]add( [n2](x), [n3](1) ) = [n4](3)
      #root(left,1).
      #root(right,4).
      #type(1,poly).
      #poly_op(1,add).
      #poly_child(1,left,2).
      #poly_child(1,right,3).
      #type(2,mono).
      #mono_coef(2,1).
      #mono_exp(2,1).
      #type(3,mono).
      #mono_coef(3,1).
      #mono_exp(3,0).
      #type(4,mono).
      #mono_coef(4,3).
      #mono_exp(4,0).  

#Program: "#hide."

Test should generate monomials:
    Modules: generator
    Program: |
        :- 0{ type(ID, mono) : node(ID) } 0.
    Expect: SAT

Test equations exist:
  Modules: generator
  Expect: SAT

Test each child has exactly parent:
  Modules: generator
  Program: |
    :- node(ID), 0 {root(ID,S) :side(S)} 0 , not 1 { parentOf(Par, ID) : node(Par) } 1.
    #show node/1.
    #show parentOf/2.
  Expect: SAT
Test nodes cannot be their own parents:
  Modules: generator
  Program: |
    :- node(ID), parentOf(ID,ID).
    #show node/1.
    #show parentOf/2.
  Expect: SAT

Test each poly has an operation:
  Modules: generator
  Program: |
    :- node(ID), type(ID,poly), 0 { nodeOper(ID, OP) : operator(OP)} 0.
  Expect: SAT

Test monomials do not have operators:
  Modules: generator
  Program: |
    :- node(ID), type(ID,mono), nodeOper(ID,Op).
  Expect: SAT

Test polys do not have coefficients:
  Modules: generator
  Program: |
    :- node(ID), type(ID,poly), nodeCoef(ID,Coeff).
  Expect: SAT

Test solver should be able to solve tests:
    Modules: solver
    Program: |
        % a sample equation generated by eqn_generator and solver run side by side. I want to see how long it takes to just solve an equation
        node(1). node(2). node(7). node(8). type(1,mono). type(2,poly). type(7,mono). type(8,mono). nodeOper(2,add). numChildren(2,2). parentOf(2,7). parentOf(2,8). side(1,left). side(2,right). side(7,right). side(8,right). depth(1,0). depth(2,0). depth(7,1). depth(8,1). nodeCoef(1,-1). nodeCoef(7,-5). nodeCoef(8,-5). nodeDeg(1,2). nodeDeg(7,1). nodeDeg(8,1). 
    Expect: SAT
#Test x+1=3 is a valid equation:
  #Modules: [x_plus_one_equals_three, generator]
  #Arguments: -c num_nodes=4 -c max_coef_value=3 -c max_exp_value=1
  #Expect: SAT


#Test moving a constant:
  #Modules: [x_plus_one_equals_three, solver]
  #Program: |
    #okay :- selected(t(0),move_const(Const)).
    #:- not okay.
    ##hide.
  #Expect: SAT

#Test moving a constant and collapsing it:
  #Modules: [x_plus_one_equals_three, solver]
  #Arguments: -c max_time=2
  #Program: |
    #okay :- selected(t(1),collapse_consts(Poly)).
    #:- not okay.
    ##hide.
  #Expect: SAT


